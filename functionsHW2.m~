%% this is a function file for each of the methods
classdef functionsHW2
    properties
        func
        optimalVal
    end
    methods
        function bi = Bisection(obj, highVal, lowVal, eps)
            f = [obj.func];
            sensitivity = 0;
            iterations  = 0;
            done = 0;
            mid = highVal;
            opt = [obj.optimalVal];
% step 1 is make sure bounds work
            while done == 0
                iterations = iterations + 1;
                up  = polyval(polyder(f),highVal);
                low = polyval(polyder(f),lowVal);
                if up<0 && low>0
                    done = 1;
                elseif up>=0
                    highVal = highVal-.01;
                elseif low<=0
                    lowVal = lowVal+.01;   
                end
            end
% step 2 is to solve
            while abs((polyval(f,mid)-polyval(f,opt))/polyval(f,opt)) <= eps && abs((mid-opt)/opt) <= eps
                mid = (lowVal+highVal)/2;
                if polyval(polyder(f),mid)>0
                    lowVal = mid;
                else
                    highVal = mid;
                end
                iterations = iterations + 1;
            end
            epsilonf, epsilonx = [abs(polyval(f,mid)-polyval(f,opt)/polyval(f,opt)), abs((mid-opt)/opt)]
            bi = [epsilonf, epsilonx, iterations, sensitivity];
        end


%         function [epsilon, iterations, sensitivity] = Powell(x,eps, funct)
% 
% 
% 
% 
% 
%         end
% 
%         function [epsilon, iterations, sensitivity] = Cubic(x,eps, funct)
% 
% 
% 
% 
% 
%         end
% 
%         function [epsilon, iterations, sensitivity] = GoldenSec(x,eps, funct)
% 
% 
% 
% 
% 
%         end

    end
end